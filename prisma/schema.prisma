generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  photoUrl          String?
  createdAt         DateTime @default(now())
  lastActive        DateTime @updatedAt
  isAdmin           Boolean  @default(false)
  stats             Json?
  friendsAsUser     Friend[] @relation("UserAsUser")
  friendsAsFriend   Friend[] @relation("UserAsFriend")
  friendRequestsSent FriendRequest[] @relation("FromUser")
  friendRequestsReceived FriendRequest[] @relation("ToUser")
  messagesSent      Message[] @relation("Sender")
  messagesReceived  Message[] @relation("Receiver")
  notifications     Notification[]
  achievements      UserAchievement[]
  puzzles           Puzzle[] @relation("PuzzleAuthor")
  xp                Int      @default(0)
  level             Int      @default(1)
  tutorialCompleted Boolean  @default(false)
  notificationPrefs Json?
  profileThemes     UserProfileTheme[]
  profileBadges     UserProfileBadge[]
  groupChatsCreated GroupChat[] @relation("GroupChatCreatedBy")
  groupMemberships  GroupMember[]
  matchesAsPlayer1  Match[] @relation("Player1")
  matchesAsPlayer2  Match[] @relation("Player2")
  matchesWon        Match[] @relation("MatchWinner")
  puzzleRatings     PuzzleRating[]
  puzzleComments    PuzzleComment[]
  userChallenges    UserChallenge[]
  equippedThemeId    String?
  equippedFontId     String?
  equippedEmojiPackId String?
  equippedSoundPackId String?
  equippedTitleId    String?
  equippedFrameId    String?
  equippedBurnTrailId String?
  coins              Int      @default(0)
  premiumCurrency    Int      @default(0)
  userCustomizations UserCustomization[]
  userLoadouts       UserLoadout[]
  botStats          BotStats[]
}

model Friend {
  id        String   @id @default(uuid())
  user      User     @relation("UserAsUser", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("UserAsFriend", fields: [friendId], references: [id])
  friendId  String
  status    String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(uuid())
  fromUser  User     @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation("ToUser", fields: [toUserId], references: [id])
  toUserId  String
  status    String
  createdAt DateTime @default(now())
}

model GroupChat {
  id        String   @id @default(uuid())
  name      String
  createdBy User     @relation("GroupChatCreatedBy", fields: [createdById], references: [id])
  createdById String
  createdAt  DateTime @default(now())
  members    GroupMember[]
  messages   Message[]
}

model GroupMember {
  id        String   @id @default(uuid())
  group     GroupChat @relation(fields: [groupId], references: [id])
  groupId   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime  @default(now())
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  senderId  String
  receiver  User?    @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String?
  group     GroupChat? @relation(fields: [groupId], references: [id])
  groupId   String?
  message   String
  sentAt    DateTime @default(now())
  system    Boolean  @default(false)
}

model Puzzle {
  id        String   @id @default(uuid())
  title     String
  author    User     @relation("PuzzleAuthor", fields: [authorId], references: [id])
  authorId  String
  groups    Json
  wildcards Json
  isDaily   Boolean  @default(false)
  date      DateTime?
  rating    Float?
  favorites Int      @default(0)
  createdAt DateTime @default(now())
  matches   Match[]
  type      String   @default("standard") // e.g. standard, timed, endless, coop
  ratings   PuzzleRating[]
  comments  PuzzleComment[]
}

model Match {
  id        String   @id @default(uuid())
  player1   User     @relation("Player1", fields: [player1Id], references: [id])
  player1Id String
  player2   User     @relation("Player2", fields: [player2Id], references: [id])
  player2Id String
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  puzzleId  String
  state     String
  winner    User?    @relation("MatchWinner", fields: [winnerId], references: [id])
  winnerId  String?
  startedAt DateTime @default(now())
  endedAt   DateTime?
  type      String   @default("standard") // e.g. standard, timed, endless, coop
  // --- Bot Challenge fields ---
  botName      String?
  botDifficulty String?
  botAvatar    String?
}

model Achievement {
  id          String   @id @default(uuid())
  label       String   @unique
  description String
  icon        String?
  criteria    Json
  createdAt   DateTime @default(now())
  userAchievements UserAchievement[]
  rewards     AchievementReward[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model AchievementReward {
  id            String   @id @default(uuid())
  achievementId String
  rewardType    String
  rewardValue   String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  content   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model PuzzleRating {
  id        String   @id @default(uuid())
  puzzleId  String
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  @@unique([puzzleId, userId])
}

model PuzzleComment {
  id        String   @id @default(uuid())
  puzzleId  String
  userId    String
  comment   String
  createdAt DateTime @default(now())
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Challenge {
  id          String   @id @default(uuid())
  label       String   @unique
  description String
  type        String   // daily, weekly, etc.
  criteria    Json
  startDate   DateTime
  endDate     DateTime
  rewards     Json?
  userChallenges UserChallenge[]
}

model UserChallenge {
  id          String   @id @default(uuid())
  userId      String
  challengeId String
  completed   Boolean  @default(false)
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  @@unique([userId, challengeId])
}

model LeaderboardSeason {
  id        String   @id @default(uuid())
  label     String   @unique
  startDate DateTime
  endDate   DateTime
  winners   Json?
}

model UserProfileTheme {
  id      String   @id @default(uuid())
  userId  String
  theme   String
  unlockedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
}

model UserProfileBadge {
  id      String   @id @default(uuid())
  userId  String
  badge   String
  unlockedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
}

model CustomizationItem {
  id           String   @id @default(uuid())
  type         String   // e.g. 'theme', 'font', 'emoji', 'sound', 'title', 'frame', 'burnTrail'
  name         String
  description  String?
  rarity       String?  // e.g. 'common', 'rare', 'epic', 'legendary', 'event'
  price        Int?     // in-game currency
  premiumPrice Int?     // premium currency (optional)
  previewUrl   String?  // image, animation, or sound preview
  isSeasonal   Boolean  @default(false)
  isExclusive  Boolean  @default(false)
  availableAt  DateTime?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  userCustomizations UserCustomization[]
}

model UserCustomization {
  id         String   @id @default(uuid())
  userId     String
  itemId     String
  acquiredAt DateTime @default(now())
  via        String?  // 'achievement', 'purchase', 'event', etc.
  user       User     @relation(fields: [userId], references: [id])
  item       CustomizationItem @relation(fields: [itemId], references: [id])
}

model UserLoadout {
  id         String   @id @default(uuid())
  userId     String
  name       String
  themeId    String?
  fontId     String?
  emojiPackId String?
  soundPackId String?
  titleId    String?
  frameId    String?
  burnTrailId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model BotStats {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  botDifficulty     String   // e.g. 'easy', 'medium', 'hard', 'legendary'
  // --- Core Stats ---
  completed         Int      @default(0)
  winCount          Int      @default(0)
  lossCount         Int      @default(0)
  winPercentage     Float    @default(0)
  currentStreak     Int      @default(0)
  maxStreak         Int      @default(0)
  perfectPuzzles    Int      @default(0)
  totalPoints       Int      @default(0)
  fastestWinTime    Int?     // seconds (for MM:SS display)
  averageMatchTime  Float?   // seconds
  groupsSolvedFirst Int      @default(0)
  botOutsolvedFirst Int      @default(0)
  threeMistakeFails Int      @default(0)
  // --- Advanced Stats ---
  totalWordsGuessed     Int    @default(0)
  totalMistakes         Int    @default(0)
  accuracyPercentage    Float  @default(0)
  mostGuessedWord       String?
  mostCommonTheme       String?
  dramaticComebacks     Int    @default(0)
  clutchWins            Int    @default(0)
  cleanSweeps           Int    @default(0)
  multiPerfects         Int    @default(0)
  averageMistakesPerMatch Float @default(0)
  // --- Timestamps ---
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@unique([userId, botDifficulty])
}
