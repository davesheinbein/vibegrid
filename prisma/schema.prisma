generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  photoUrl     String?
  createdAt    DateTime @default(now())
  lastActive   DateTime @updatedAt
  isAdmin      Boolean  @default(false)
  stats        Json?
  friends      Friend[] @relation("UserFriends")
  messages     Message[]
  notifications Notification[]
  achievements UserAchievement[]
  puzzles      Puzzle[] @relation("PuzzleAuthor")
}

model Friend {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  friend    User     @relation("UserFriends", fields: [friendId], references: [id])
  friendId  String
  status    String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(uuid())
  fromUser  User     @relation(fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User     @relation(fields: [toUserId], references: [id])
  toUserId  String
  status    String
  createdAt DateTime @default(now())
}

model GroupChat {
  id        String   @id @default(uuid())
  name      String
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt  DateTime @default(now())
  members    GroupMember[]
  messages   Message[]
}

model GroupMember {
  id        String   @id @default(uuid())
  group     GroupChat @relation(fields: [groupId], references: [id])
  groupId   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime  @default(now())
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  receiver  User?    @relation(fields: [receiverId], references: [id])
  receiverId String?
  group     GroupChat? @relation(fields: [groupId], references: [id])
  groupId   String?
  message   String
  sentAt    DateTime @default(now())
  system    Boolean  @default(false)
}

model Puzzle {
  id        String   @id @default(uuid())
  title     String
  author    User     @relation("PuzzleAuthor", fields: [authorId], references: [id])
  authorId  String
  groups    Json
  wildcards Json
  isDaily   Boolean  @default(false)
  date      DateTime?
  rating    Float?
  favorites Int      @default(0)
  createdAt DateTime @default(now())
  matches   Match[]
}

model Match {
  id        String   @id @default(uuid())
  player1   User     @relation("Player1", fields: [player1Id], references: [id])
  player1Id String
  player2   User     @relation("Player2", fields: [player2Id], references: [id])
  player2Id String
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  puzzleId  String
  state     String
  winner    User?    @relation(fields: [winnerId], references: [id])
  winnerId  String?
  startedAt DateTime @default(now())
  endedAt   DateTime?
}

model Achievement {
  id        String   @id @default(uuid())
  label     String
  description String
  icon      String
  criteria  Json
}

model UserAchievement {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  content   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}
