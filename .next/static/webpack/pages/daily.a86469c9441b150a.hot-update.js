"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/daily",{

/***/ "(pages-dir-browser)/./src/utils/dailyCompletion.ts":
/*!**************************************!*\
  !*** ./src/utils/dailyCompletion.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearDailyCompletion: () => (/* binding */ clearDailyCompletion),\n/* harmony export */   clearDailyPuzzleProgress: () => (/* binding */ clearDailyPuzzleProgress),\n/* harmony export */   getDailyCompletion: () => (/* binding */ getDailyCompletion),\n/* harmony export */   getDailyPuzzleProgress: () => (/* binding */ getDailyPuzzleProgress),\n/* harmony export */   getTodayDateString: () => (/* binding */ getTodayDateString),\n/* harmony export */   saveDailyPuzzleProgress: () => (/* binding */ saveDailyPuzzleProgress),\n/* harmony export */   setDailyCompletion: () => (/* binding */ setDailyCompletion)\n/* harmony export */ });\n// Centralized daily puzzle completion logic\n// This module provides helpers to check, set, and retrieve daily puzzle completion status for the current user/date.\n// Storage: localStorage (for demo; replace with backend API for real users)\nvar COMPLETION_KEY = 'dailyPuzzleCompletion';\nfunction getTodayDateString() {\n    var now = new Date();\n    var day = String(now.getDate()).padStart(2, '0');\n    var month = String(now.getMonth() + 1).padStart(2, '0');\n    var year = now.getFullYear();\n    return \"\".concat(day, \"/\").concat(month, \"/\").concat(year);\n}\nfunction getDailyCompletion() {\n    console.log('getDailyCompletion');\n    if (false) {}\n    var raw = localStorage.getItem(COMPLETION_KEY);\n    console.log('ðŸš€ ~ raw:', raw);\n    if (!raw) return null;\n    try {\n        var data = JSON.parse(raw);\n        console.log('ðŸš€ ~ data:', data);\n        if (data && data.date === getTodayDateString()) {\n            return data;\n        }\n        console.log(\"catch\");\n        return null;\n    } catch (e) {\n        console.log(\"catch\");\n        return null;\n    }\n}\nfunction setDailyCompletion(result) {\n    if (false) {}\n    var record = {\n        date: getTodayDateString(),\n        result: result\n    };\n    console.log('ðŸš€ ~ record:', record);\n    localStorage.setItem(COMPLETION_KEY, JSON.stringify(record));\n}\nfunction clearDailyCompletion() {\n    if (false) {}\n    localStorage.removeItem(COMPLETION_KEY);\n}\n// --- Persistent Daily Puzzle Progress ---\nvar PROGRESS_KEY = 'dailyPuzzleProgress';\nfunction saveDailyPuzzleProgress(progress) {\n    if (false) {}\n    localStorage.setItem(PROGRESS_KEY, JSON.stringify(progress));\n}\nfunction getDailyPuzzleProgress() {\n    if (false) {}\n    var raw = localStorage.getItem(PROGRESS_KEY);\n    if (!raw) return null;\n    try {\n        var data = JSON.parse(raw);\n        // Check 7-day expiry\n        if (data.createdAt) {\n            var created = new Date(data.createdAt);\n            var now = new Date();\n            if ((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24) > 7) {\n                localStorage.removeItem(PROGRESS_KEY);\n                return null;\n            }\n        }\n        return data;\n    } catch (e) {\n        return null;\n    }\n}\nfunction clearDailyPuzzleProgress() {\n    if (false) {}\n    localStorage.removeItem(PROGRESS_KEY);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy91dGlscy9kYWlseUNvbXBsZXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDRDQUE0QztBQUM1QyxxSEFBcUg7QUFDckgsNEVBQTRFO0FBRTVFLElBQU1BLGlCQUFpQjtBQWNoQixTQUFTQztJQUNmLElBQU1DLE1BQU0sSUFBSUM7SUFDaEIsSUFBTUMsTUFBTUMsT0FBT0gsSUFBSUksT0FBTyxJQUFJQyxRQUFRLENBQUMsR0FBRztJQUM5QyxJQUFNQyxRQUFRSCxPQUFPSCxJQUFJTyxRQUFRLEtBQUssR0FBR0YsUUFBUSxDQUFDLEdBQUc7SUFDckQsSUFBTUcsT0FBT1IsSUFBSVMsV0FBVztJQUM1QixPQUFPLEdBQVVILE9BQVBKLEtBQUksS0FBWU0sT0FBVEYsT0FBTSxLQUFRLE9BQUxFO0FBQzNCO0FBRU8sU0FBU0U7SUFDZkMsUUFBUUMsR0FBRyxDQUFDO0lBQ1osSUFBSSxLQUE2QixFQUFFLEVBQVk7SUFDL0MsSUFBTUMsTUFBTUMsYUFBYUMsT0FBTyxDQUFDakI7SUFDakNhLFFBQVFDLEdBQUcsQ0FBQyxhQUFhQztJQUN6QixJQUFJLENBQUNBLEtBQUssT0FBTztJQUNqQixJQUFJO1FBQ0gsSUFBTUcsT0FBT0MsS0FBS0MsS0FBSyxDQUFDTDtRQUN4QkYsUUFBUUMsR0FBRyxDQUFDLGNBQWNJO1FBQzFCLElBQUlBLFFBQVFBLEtBQUtHLElBQUksS0FBS3BCLHNCQUFzQjtZQUMvQyxPQUFPaUI7UUFDUjtRQUNBTCxRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPO0lBQ1IsRUFBRSxVQUFNO1FBQ1BELFFBQVFDLEdBQUcsQ0FBQztRQUNaLE9BQU87SUFDUjtBQUNEO0FBRU8sU0FBU1EsbUJBQ2ZDLE1BQXVDO0lBRXZDLElBQUksS0FBNkIsRUFBRSxFQUFPO0lBQzFDLElBQU1DLFNBQWdDO1FBQ3JDSCxNQUFNcEI7UUFDTnNCLFFBQUFBO0lBQ0Q7SUFDQVYsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQlU7SUFDNUJSLGFBQWFTLE9BQU8sQ0FDbkJ6QixnQkFDQW1CLEtBQUtPLFNBQVMsQ0FBQ0Y7QUFFakI7QUFFTyxTQUFTRztJQUNmLElBQUksS0FBNkIsRUFBRSxFQUFPO0lBQzFDWCxhQUFhWSxVQUFVLENBQUM1QjtBQUN6QjtBQUVBLDJDQUEyQztBQUMzQyxJQUFNNkIsZUFBZTtBQWNkLFNBQVNDLHdCQUNmQyxRQUE2QjtJQUU3QixJQUFJLEtBQTZCLEVBQUUsRUFBTztJQUMxQ2YsYUFBYVMsT0FBTyxDQUNuQkksY0FDQVYsS0FBS08sU0FBUyxDQUFDSztBQUVqQjtBQUVPLFNBQVNDO0lBQ2YsSUFBSSxLQUE2QixFQUFFLEVBQVk7SUFDL0MsSUFBTWpCLE1BQU1DLGFBQWFDLE9BQU8sQ0FBQ1k7SUFDakMsSUFBSSxDQUFDZCxLQUFLLE9BQU87SUFDakIsSUFBSTtRQUNILElBQU1HLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0w7UUFDeEIscUJBQXFCO1FBQ3JCLElBQUlHLEtBQUtlLFNBQVMsRUFBRTtZQUNuQixJQUFNQyxVQUFVLElBQUkvQixLQUFLZSxLQUFLZSxTQUFTO1lBQ3ZDLElBQU0vQixNQUFNLElBQUlDO1lBQ2hCLElBQ0MsQ0FBQ0QsSUFBSWlDLE9BQU8sS0FBS0QsUUFBUUMsT0FBTyxFQUFDLElBQy9CLFFBQU8sS0FBSyxLQUFLLEVBQUMsSUFDcEIsR0FDQztnQkFDRG5CLGFBQWFZLFVBQVUsQ0FBQ0M7Z0JBQ3hCLE9BQU87WUFDUjtRQUNEO1FBQ0EsT0FBT1g7SUFDUixFQUFFLFVBQU07UUFDUCxPQUFPO0lBQ1I7QUFDRDtBQUVPLFNBQVNrQjtJQUNmLElBQUksS0FBNkIsRUFBRSxFQUFPO0lBQzFDcEIsYUFBYVksVUFBVSxDQUFDQztBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2Rhdmlkc2hlaW5iZWluL2NvZGUvdmliZS1ncmlkL3NyYy91dGlscy9kYWlseUNvbXBsZXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2VudHJhbGl6ZWQgZGFpbHkgcHV6emxlIGNvbXBsZXRpb24gbG9naWNcbi8vIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGhlbHBlcnMgdG8gY2hlY2ssIHNldCwgYW5kIHJldHJpZXZlIGRhaWx5IHB1enpsZSBjb21wbGV0aW9uIHN0YXR1cyBmb3IgdGhlIGN1cnJlbnQgdXNlci9kYXRlLlxuLy8gU3RvcmFnZTogbG9jYWxTdG9yYWdlIChmb3IgZGVtbzsgcmVwbGFjZSB3aXRoIGJhY2tlbmQgQVBJIGZvciByZWFsIHVzZXJzKVxuXG5jb25zdCBDT01QTEVUSU9OX0tFWSA9ICdkYWlseVB1enpsZUNvbXBsZXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhaWx5Q29tcGxldGlvblJlY29yZCB7XG5cdGRhdGU6IHN0cmluZzsgLy8gZS5nLiAnMDkvMDYvMjAyNSdcblx0cmVzdWx0OiB7XG5cdFx0d2luOiBib29sZWFuO1xuXHRcdHNjb3JlOiBudW1iZXI7XG5cdFx0YXR0ZW1wdHNMZWZ0OiBudW1iZXI7XG5cdFx0YnVybkJvbnVzOiBudW1iZXI7XG5cdFx0ZmluaXNoVGltZTogbnVtYmVyOyAvLyBzZWNvbmRzXG5cdFx0dGltZXN0YW1wOiBudW1iZXI7IC8vIG1zIHNpbmNlIGVwb2NoXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2RheURhdGVTdHJpbmcoKTogc3RyaW5nIHtcblx0Y29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblx0Y29uc3QgZGF5ID0gU3RyaW5nKG5vdy5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG5cdGNvbnN0IG1vbnRoID0gU3RyaW5nKG5vdy5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcblx0Y29uc3QgeWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuXHRyZXR1cm4gYCR7ZGF5fS8ke21vbnRofS8ke3llYXJ9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhaWx5Q29tcGxldGlvbigpOiBEYWlseUNvbXBsZXRpb25SZWNvcmQgfCBudWxsIHtcblx0Y29uc29sZS5sb2coJ2dldERhaWx5Q29tcGxldGlvbicpO1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBudWxsO1xuXHRjb25zdCByYXcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShDT01QTEVUSU9OX0tFWSk7XG5cdGNvbnNvbGUubG9nKCfwn5qAIH4gcmF3OicsIHJhdylcblx0aWYgKCFyYXcpIHJldHVybiBudWxsO1xuXHR0cnkge1xuXHRcdGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJhdyk7XG5cdFx0Y29uc29sZS5sb2coJ/CfmoAgfiBkYXRhOicsIGRhdGEpXG5cdFx0aWYgKGRhdGEgJiYgZGF0YS5kYXRlID09PSBnZXRUb2RheURhdGVTdHJpbmcoKSkge1xuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiY2F0Y2hcIik7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0gY2F0Y2gge1xuXHRcdGNvbnNvbGUubG9nKFwiY2F0Y2hcIik7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERhaWx5Q29tcGxldGlvbihcblx0cmVzdWx0OiBEYWlseUNvbXBsZXRpb25SZWNvcmRbJ3Jlc3VsdCddXG4pIHtcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cdGNvbnN0IHJlY29yZDogRGFpbHlDb21wbGV0aW9uUmVjb3JkID0ge1xuXHRcdGRhdGU6IGdldFRvZGF5RGF0ZVN0cmluZygpLFxuXHRcdHJlc3VsdCxcblx0fTtcblx0Y29uc29sZS5sb2coJ/CfmoAgfiByZWNvcmQ6JywgcmVjb3JkKTtcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXG5cdFx0Q09NUExFVElPTl9LRVksXG5cdFx0SlNPTi5zdHJpbmdpZnkocmVjb3JkKVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJEYWlseUNvbXBsZXRpb24oKSB7XG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShDT01QTEVUSU9OX0tFWSk7XG59XG5cbi8vIC0tLSBQZXJzaXN0ZW50IERhaWx5IFB1enpsZSBQcm9ncmVzcyAtLS1cbmNvbnN0IFBST0dSRVNTX0tFWSA9ICdkYWlseVB1enpsZVByb2dyZXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBEYWlseVB1enpsZVByb2dyZXNzIHtcblx0cHV6emxlRGF0ZTogc3RyaW5nOyAvLyAnWVlZWS1NTS1ERCdcblx0Y3JlYXRlZEF0OiBzdHJpbmc7IC8vIElTTyBzdHJpbmdcblx0bWF0Y2hlZEdyb3VwczogeyBncm91cElkeDogbnVtYmVyOyB3b3Jkczogc3RyaW5nW10gfVtdO1xuXHRyZW1haW5pbmdBdHRlbXB0czogbnVtYmVyO1xuXHRidXJuZWRXb3Jkczogc3RyaW5nW107XG5cdGVsYXBzZWRUaW1lOiBudW1iZXI7IC8vIHNlY29uZHNcblx0Y29tcGxldGVkOiBib29sZWFuO1xuXHRidXJuQm9udXM/OiBudW1iZXI7XG5cdC8vIEFkZCBtb3JlIGZpZWxkcyBhcyBuZWVkZWQgKGUuZy4sIHN0cmVha3MsIGJvbnVzZXMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlRGFpbHlQdXp6bGVQcm9ncmVzcyhcblx0cHJvZ3Jlc3M6IERhaWx5UHV6emxlUHJvZ3Jlc3Ncbikge1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXG5cdFx0UFJPR1JFU1NfS0VZLFxuXHRcdEpTT04uc3RyaW5naWZ5KHByb2dyZXNzKVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGFpbHlQdXp6bGVQcm9ncmVzcygpOiBEYWlseVB1enpsZVByb2dyZXNzIHwgbnVsbCB7XG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG51bGw7XG5cdGNvbnN0IHJhdyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBST0dSRVNTX0tFWSk7XG5cdGlmICghcmF3KSByZXR1cm4gbnVsbDtcblx0dHJ5IHtcblx0XHRjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyYXcpO1xuXHRcdC8vIENoZWNrIDctZGF5IGV4cGlyeVxuXHRcdGlmIChkYXRhLmNyZWF0ZWRBdCkge1xuXHRcdFx0Y29uc3QgY3JlYXRlZCA9IG5ldyBEYXRlKGRhdGEuY3JlYXRlZEF0KTtcblx0XHRcdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdChub3cuZ2V0VGltZSgpIC0gY3JlYXRlZC5nZXRUaW1lKCkpIC9cblx0XHRcdFx0XHQoMTAwMCAqIDYwICogNjAgKiAyNCkgPlxuXHRcdFx0XHQ3XG5cdFx0XHQpIHtcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oUFJPR1JFU1NfS0VZKTtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhO1xuXHR9IGNhdGNoIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJEYWlseVB1enpsZVByb2dyZXNzKCkge1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblx0bG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oUFJPR1JFU1NfS0VZKTtcbn1cbiJdLCJuYW1lcyI6WyJDT01QTEVUSU9OX0tFWSIsImdldFRvZGF5RGF0ZVN0cmluZyIsIm5vdyIsIkRhdGUiLCJkYXkiLCJTdHJpbmciLCJnZXREYXRlIiwicGFkU3RhcnQiLCJtb250aCIsImdldE1vbnRoIiwieWVhciIsImdldEZ1bGxZZWFyIiwiZ2V0RGFpbHlDb21wbGV0aW9uIiwiY29uc29sZSIsImxvZyIsInJhdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0ZSIsInNldERhaWx5Q29tcGxldGlvbiIsInJlc3VsdCIsInJlY29yZCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjbGVhckRhaWx5Q29tcGxldGlvbiIsInJlbW92ZUl0ZW0iLCJQUk9HUkVTU19LRVkiLCJzYXZlRGFpbHlQdXp6bGVQcm9ncmVzcyIsInByb2dyZXNzIiwiZ2V0RGFpbHlQdXp6bGVQcm9ncmVzcyIsImNyZWF0ZWRBdCIsImNyZWF0ZWQiLCJnZXRUaW1lIiwiY2xlYXJEYWlseVB1enpsZVByb2dyZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/utils/dailyCompletion.ts\n"));

/***/ })

});